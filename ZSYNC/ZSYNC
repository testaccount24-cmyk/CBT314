  /* --------------------  rexx procedure  -------------------- */
  zver = '5.1'
  /* Name:      zSync                                           |
  |                                                            |
  | Function:  Copy New and Updated PDS members based on       |
  |            ISPF statistics from a source library to        |
  |            a target library.                               |
  |                                                            |
  |            Only PDS/PDSE libraries are supported,          |
  |            ioncluding load libraries.                      |
  |                                                            |
  |            The successful copy information will be         |
  |            written to the ISPF Log.                        |
  |                                                            |
  |            Optional volsers are allowed, via the Panel     |
  |            for the from and to libraries.                  |
  |                                                            |
  | Commands:                                                  |
  |           COPY    - Copy all members that are different or |
  |                     don't exist in the target              |
  |                   - COPY non-blank will simulate copy      |
  |           FLIP    - Alias of ZSWAP                         |
  |           LOCATE  - Locate member-name (partial accepted)  |
  |           ONLY    - Display only those members that are    |
  |                     copy eligible                          |
  |           REFRESH - Rebuild the display of ALL members     |
  |                     after using ONLY                       |
  |           SAVE    - Generate a report of the state of both |
  |                     From and To members (limited by Only)  |
  |           SORT    - Sort member or state                   |
  |                     syntax: sort member/state a/d          |
  |                     a = ascending (default) d = descending |
  |           ZSwap   - Refresh and swap the dataset names     |
  |                                                            |
  | Line Selections:                                           |
  |           B       - Browse From member                     |
  |           BT      - Browse To member                       |
  |           C       - Compare using ISPF Edit Compare        |
  |                     converted to CS if RECFM=U             |
  |           CD      - Compare using SuperC                   |
  |           CS      - Compare using SuperC and View Results  |
  |           CF      - Compare using ISPF Edit Compare        |
  |                     editing the From member                |
  |           CT      - Compare using ISPF Edit Compare        |
  |                     editing the To member                  |
  |           E       - Edit from member                       |
  |           ET      - Edit to member                         |
  |           I       - Display From/To ISPF Stats             |
  |           S or /  - Prompt for Selection                   |
  |           X       - Remove member from the table           |
  |           Z       - Copy the selected member               |
  |                                                            |
  | Syntax:    %zSync from to member-pattern \ opt             |
  |                                                            |
  |            from            source pds                      |
  |            to              target pds                      |
  |            member-pattern  member name or pattern          |
  |                            (defaults to all)               |
  |            \               indicates options follow        |
  |            opt             a valid option                  |
  |                                                            |
  |            valid options:                                  |
  |                                                            |
  |            all             ignore ispf stats and do        |
  |                            a compare on all members        |
  |                            using SuperC                    |
  |            once            process and then exit           |
  |            only            allowed with either other       |
  |                            option and only display delta   |
  |                            members                         |
  |            quick           exit if nothing to do           |
  |                                                            |
  | Usage Notes:                                               |
  |            1. Newer date wins                              |
  |            2. Date in source and not in target wins        |
  |            3. Member in source but not in target wins      |
  |            4. ISPF services are used for stats and copy    |
  |            5. ALL ISPF Panels and messages are inline      |
  |               in this exec along with a rexx ispf edit     |
  |               macro. These are dynamically loaded, and     |
  |               removed using the loadispf subroutine.       |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            07/19/24 - Version 5.1                          |
  |                     - Correct volser for from compare in   |
  |                       edit compare macro                   |
  |            06/15/24 - Version 5.0                          |
  |                     - Update loadispf/dropispf routines    |
  |                     - Improve color for trunc warning      |
  |                     - Fixup to fully support volsers       |
  |            05/30/23 - Version 4.2                          |
  |                     - Update loadispf/dropispf routines    |
  |            04/07/23 - Version 4.1                          |
  |                     - Fix typo on execio (superc)          |
  |            01/23/23 - Version 4.0                          |
  |                     - Add CF and CT options                |
  |            12/13/22 - Version 4.0                          |
  |                     - Support from/to volsers              |
  |                     - Correct SuperC compare               |
  |                     - Remove 'Not in From' if Only         |
  |            09/15/22 - Version 3.9                          |
  |                     - Correct Counter for changed          |
  |            08/12/22 - Version 3.8                          |
  |                     - Enhance Compare on size              |
  |            07/22/22 - Version 3.7                          |
  |                     - Fix Only on command line             |
  |            04/13/22 - Version 3.6                          |
  |                     - Fix logic error                      |
  |            04/11/22 - Version 3.5                          |
  |                     - Add Display Delta Only to Prompt     |
  |                       panel                                |
  |            07/19/21 - Version 3.4                          |
  |                     - Correct superc lrecl to 125          |
  |            07/16/21 - Version 3.3                          |
  |                     - Correct residual stem info on CS     |
  |            06/28/21 - Version 3.2                          |
  |                     - Fix SRCHME to SRCHMEM (fat fingers)  |
  |            07/01/20 - Version 3.1                          |
  |                     - Add FLIP as alias of zswap           |
  |                     - Use SuperC if ALL option or          |
  |                       RECFM=U                              |
  |                     - Much cleanup                         |
  |            05/02/20 - Version 3.0                          |
  |                     - Add quick option                     |
  |            03/14/20 - Version 2.9                          |
  |                     - Check for 0 members in target        |
  |            07/11/19 - Version 2.8                          |
  |                     - Check ISPF Stats for 0 records       |
  |            05/21/19 - Version 2.7                          |
  |                     - Align tutorial                       |
  |            03/13/19 - Version 2.6                          |
  |                     - Adjust Addpop Row/Column             |
  |            02/15/19 - Version 2.5                          |
  |                     - Correct non-stats compare test       |
  |                     - Add LMFree for superc                |
  |            08/03/18 - Version 2.4                          |
  |                     - Correct loop with zswap and 0 elig   |
  |            08/03/18 - Version 2.3                          |
  |                     - Add filter to selection display      |
  |            02/05/18 - Version 2.2                          |
  |                     - Correct truncation warning           |
  |            01/30/18 - Version 2.1                          |
  |                     - Add only option                      |
  |            01/04/18 - Version 2.0                          |
  |                     - Add option all                       |
  |            01/04/18 - Version 1.9                          |
  |                     - Add option once                      |
  |            10/24/17 - Version 1.8                          |
  |                     - Honor if just frompds is passed      |
  |            09/13/17 - Version 1.7                          |
  |                     - Correct if member name only used     |
  |            06/23/17 - Version 1.6                          |
  |                     - Correct Save report dates            |
  |            06/23/17 - Version 1.5                          |
  |                     - Save from and to dsnames in ispf     |
  |                       profile (moved from the panel)       |
  |            06/23/17 - Version 1.4                          |
  |                     - Correction to date used for compare  |
  |            06/22/17 - Version 1.3                          |
  |                     - Add Save option to generate report   |
  |                     - Compare Mod date instead of Create   |
  |                       date                                 |
  |            06/21/17 - Version 1.2                          |
  |                     - Update for 4 digit year              |
  |            06/12/17 - Version 1.1                          |
  |                     - Change tutorial for ZSWAP to ZSwap   |
  |            06/06/17 - Version 1.1                          |
  |                     - Add Locate for partial member name   |
  |            06/06/17 - Version 1.0                          |
  |                     - Add Locate for partial member name   |
  |            06/05/17 - Version 0.9                          |
  |                     - Correct for multiple member sels     |
  |            06/05/17 - Add version (0.8)                    |
  |                     - Remove StemEdit and use View         |
  |            05/31/17 - Return to Prompt before final exit   |
  |                     - Add Progress display                 |
  |                     - Add Z option to copy member          |
  |                     - Correct ftime/ttime check            |
  |            05/30/17 - Remove Check as a command            |
  |                       and run it automatically.            |
  |                     - Add TRUNC to the LMCOPY              |
  |                     - Change Delta/Identical messages      |
  |                       for check processing.                |
  |                     - Add member pattern                   |
  |                     - Add Locate                           |
  |            05/27/17 - Add Check and sort order             |
  |                     - Change name from zClone to zSync     |
  |            05/26/17 - Add CD line command                  |
  |                     - fix / to work                        |
  |                     - Change C to change state             |
  |            05/25/17 - Make stats field scrollable (l/r)    |
  |                     - Clean up some code illogic           |
  |            05/25/17 - Add ISPF Stats                       |
  |                     - Remove BF option (redundant)         |
  |                     - Add initial message count            |
  |                     - Add Copy simulation                  |
  |            05/24/17 - More updates                         |
  |            05/23/17 - More updates                         |
  |            05/22/17 - Major updates                        |
  |            05/10/17 - Make it work                         |
  |            05/09/17 - Creation                             |
  |                                                            |
  * ---------------------------------------------------------- */

  /* ------------------------------------- *
  | Get the From and To PDS dataset names |
  * ------------------------------------- */
  arg frompds topds mempat '\' opt

  /* ------------------------------- *
  | Process option for ignore_stats |
  * ------------------------------- */
  if wordpos('ALL',opt) > 0 then ignore_stats = 1
  else ignore_stats = 0

  /* ------------------- *
  | Define our defaults |
  * ------------------- */
  parse value '' with null flrecl tlrecl trwarn redo ,
    hold_sel zcmd donly
  zerrhm   = '#zs'
  zerralrm = 'NO'
  stats    = 'cp'random(999)
  count    = 0
  Address ISPEXEC
  load_info = loadispf()
  'vput (frompds topds) profile'
  if frompds /= null then do
     fvol = null
     end
  if topds /= null then do
     tvol = null
     end
  'Control Errors Return'
  'vput (tvol fvol) shared'

  /* --------------------------------------- *
  | Check for From and To PDS Dataset Names |
  * --------------------------------------- */
Check_dsns:
  dsnfok = 0;dsntok = 0
  if redo    /= null then call prompt
  if frompds =  null then call prompt
  if topds   =  null then call prompt

  if fvol /= null then do
     x = listdsi(frompds 'volume('fvol')')
     if x > 4 then do
        zerrsm = 'FromPDS Error'
        zerrlm = frompds sysmsglvl2
        'Setmsg Msg(isrz002)'
        call prompt
        end
     end
  else do while sysdsn(frompds) /= 'OK'
    zerrsm   = 'FromPDS Error'
    zerrlm   = frompds sysdsn(frompds)
    'Setmsg Msg(isrz002)'
    call prompt
  end
  dsnfok = 1

  if tvol /= null then do
     x = listdsi(topds 'volume('tvol')')
     if x > 4 then do
        zerrsm = 'ToPDS Error'
        zerrlm = topds sysmsglvl2
        'Setmsg Msg(isrz002)'
        call prompt
        end
     end
  else do while sysdsn(topds) /= 'OK'
    zerrsm   = 'ToPDS Error'
    zerrlm   = topds sysdsn(topds)
    'Setmsg Msg(isrz002)'
    call prompt
  end
  dsntok = 1
  if (dsnfok + dsntok) /= 2 then call check_dsns

  /* --------------------------------- *
  | Restart here if refresh requested |
  * --------------------------------- */
Refresh:
  /* ----------------------------------------------------- *
  | Verify that the FromPDS and ToPDS are supported by    |
  | LMMLIST. No VSAM, No Sequential, only RECFM F or V.   |
  | If RECFM = U then set ignore_stats = 1                |
  * ----------------------------------------------------- */
  if fvol /= null
     then x = listdsi(frompds 'VOLUME('fvol') DIR')
     else x = listdsi(frompds 'DIR')
  from_lrecl = syslrecl
  from_recfm = sysrecfm
  if sysrecfm = 'U' then ignore_stats = 1
  if pos(left(sysrecfm,1),'FVU') = 0 then do
    zerrsm   = 'FromPDS Error'
    zerrlm   = frompds 'Invalid RECFM'
    'Setmsg Msg(isrz002)'
    call prompt
  end
  if sysdsorg /= 'PO' then do
    zerrsm   = 'FromPDS Error'
    zerrlm   = frompds 'Invalid DSORG - not PO'
    'Setmsg Msg(isrz002)'
    call prompt
  end

  if tvol /= null
     then x = listdsi(topds 'VOLUME('tvol') DIR')
     else x = listdsi(topds 'DIR')
  to_lrecl = syslrecl
  to_recfm = sysrecfm
  if sysrecfm = 'U' then ignore_stats = 1
  to_members = sysmembers
  if pos(left(sysrecfm,1),'FUV') = 0 then do
    zerrsm   = 'ToPDS Error'
    zerrlm   = topds 'Invalid RECFM'
    'Setmsg Msg(isrz002)'
    call prompt
  end
  if sysdsorg /= 'PO' then do
    zerrsm   = 'ToPDS Error'
    zerrlm   = topds 'Invalid DSORG - not PO'
    'Setmsg Msg(isrz002)'
    call prompt
  end

  if from_lrecl > to_lrecl then do
    flrecl = 'From DCB:' from_recfm from_lrecl
    tlrecl = 'To DCB:' to_recfm to_lrecl
    trwarn = 'Truncation Warning' flrecl tlrecl
  end

  if donly = 'Y' then opt = opt 'ONLY'
  p = wordpos('ONLY',opt)
  if p > 0 then do
    opt = delword(opt,p,1)
    donly = 'Y'
  end
  parse value '' with frommems tomems mem to. from. zcmd
  'vput (frompds topds fvol tvol) profile'
  /* ------------------ *
  | Create stats table |
  * ------------------ */
  'tbcreate' stats 'keys(mem) names(cr crf)'

  /* ------------------------------------- *
  | Now check for New and Updated Members |
  * ------------------------------------- */

  /* -------------------------------- *
  | LMInit the From and To Libraries |
  * -------------------------------- */
  if fvol /= null
     then finit = 'VOLUME('fvol')'
     else finit = null
  if tvol /= null
     then tinit = 'VOLUME('tvol')'
     else tinit = null
  "LMINIT DATAID(fromid) DATASET("frompds")" finit
  "LMINIT DATAID(toid) DATASET("topds")" tinit

  /* ---------------- *
  | Progress Display |
  * ---------------- */
  if ignore_stats = 0 then do
    progress = 'Getting ISPF Stats from From PDS Members:'
    progdsn  = frompds
    'Control Display Lock'
    'Addpop row(2) column(5)'
    'Display Panel(zsynprog)'
    'Rempop'

    /* -------------------------- *
    | Get stats for the FROM PDS |
    * -------------------------- */
    member = null
    if mempat /= null
    then pattern = 'pattern('mempat')'
    else pattern = 'member('mempat')'
    "LMOPEN DATAID("fromid") OPTION(INPUT)"
    do forever
      "LMMLIST Dataid("fromid") OPTION(LIST) MEMBER(MEMBER)" ,
        "STATS(YES)" pattern
      if rc > 3 then leave
      member = strip(member)
      frommems = frommems member
      from.member = zlm4date zlmtime ,
        zlc4date zlvers zlmod zlcnorc zlinorc zlmnorc zluser
    end
    "LMClose Dataid("fromid")"

    /* -------------------------------------------------- *
    | Setup for To PDS and get ISPF stats if members > 0 |
    * -------------------------------------------------- */
    if to_members > 0 then do

      /* --------------- *
      | Progress update |
      * --------------- */
      progress = 'Getting ISPF Stats from To PDS Members:'
      progdsn  = topds
      'Control Display Lock'
      'Addpop row(2) column(5)'
      'Display Panel(zsynprog)'
      'Rempop'

      /* ------------------------ *
      | Get stats for the TO PDS |
      * ------------------------ */
      member = null
      "LMOPEN DATAID("toid") OPTION(INPUT)"
      do forever
        "LMMLIST Dataid("toid") OPTION(LIST) MEMBER(MEMBER)" ,
          "STATS(YES)"
        if rc > 7 then leave
        member = strip(member)
        tomems = tomems member
        to.member = zlm4date zlmtime ,
          zlc4date  zlvers zlmod zlcnorc zlinorc zlmnorc zluser
      end
      "LMClose Dataid("toid")"
    end
  end

  /* ----------------------------- *
  | Now compare and do the copies |
  * ----------------------------- */
  /* --------------- *
  | Progress update |
  * --------------- */
  progress = 'Comparing ISPF Stats and Members'
  if ignore_stats = 1 then
  progress = 'Comparing Members while Ignoring ISPF Stats'
  progdsn  = null
  'Control Display Lock'
  'Addpop row(2) column(5)'
  'Display Panel(zsynprog)'
  'Rempop'

  if ignore_stats = 0 then do
    fw = words(frommems)
    ecount = 0
    do i = 1 to fw
      mem = word(frommems,i)
      cr  = null
      crf = null
      /* ------------------------- *
      | cr     delta reason       |
      | crf    copy eligible flag |
      |        1 = eligible       |
      * ------------------------- */
      if wordpos(mem,tomems) = 0 then do
        cr  = 'Not in To PDS'
        crf = 1
        ecount = ecount + 1
      end
      else do
        parse value from.mem with fdate ftime fcdate fv vm fl .
        parse value to.mem   with tdate ttime tcdate tv tm tl .
        if ignore_stats = 1
        then parse value '' with fdate ftime tdate ttime
        Select
          When fl = 0 then do
            cr = 'From member with 0 records'
          end
          When tl = 0 then do
            cr = 'To member with 0 records'
          end
          When fdate''tdate = null then do
            call check_delta
          end
          When fdate = null then do
            call check_delta
          end
          When tdate = null then do
            call check_delta
          end
          When fdate > tdate then do
            cr = 'From Date newer than To Date'
            crf = 1
            ecount = ecount + 1
            x = check_records()
          end
          When fdate < tdate then do
            cr = 'To Date newer than From Date'
            x = check_records()
            if x > 0 then ecount = ecount + 1
          end
          When tdate = null then do
            cr = 'To Date is blank'
            crf = 1
            ecount = ecount + 1
            x = check_records()
          end
          When fdate = tdate then do
            if ftime > ttime then do
              cr = 'From Date/Time is newer than' ,
                'To Date/Time'
              crf = 1
              ecount = ecount + 1
              x = check_records()
            end
            if ftime < ttime then do
               cr = 'To Date/Time is newer than' ,
                 'From Date/Time'
              call check_records
              end
          end
          Otherwise nop
        end
      end
      if donly = 'Y'
         then if cr = null
            then iterate
      'tbadd' stats
    end
  end
  else do
    Address TSO
    'Alloc f(outdd) spa(15,15) tr new reuse'
    if tvol = null
       then atvol = null
       else atvol = 'vol('tvol')'
    if fvol = null
       then afvol = null
       else afvol = 'vol('fvol')'
    'alloc f(newdd) shr reuse ds('topds')' atvol
    'alloc f(olddd) shr reuse ds('frompds')' afvol
    call outtrap 'x.'
    'free  f(sysin)'
    call outtrap 'off'
    alloc_sysin = 0
    if pos('*',mempat) = 0 then
    if strip(mempat) /= null then do
      o.1 = 'SELECT' mempat
      o.0 = 1
      'alloc f(sysin) new spa(1,1) tr recfm(f b) lrecl(80)' ,
        'blksize(6160)'
      'execio * diskw sysin (finis stem o.'
      alloc_sysin = 1
    end
    Address ISPExec ,
      'Select pgm(isrsupc) parm(OVSUML,LINECMP,NOSEQ)'
    'Execio * diskr outdd (finis stem in.'
    'Free f(outdd newdd olddd)'
    if alloc_sysin = 1 then 'Free f(sysin)'
    Address ISPExec
    np = 0
    cr = 'Delta'
    ecount = 0

    if pos('*',mempat) > 0 then do
       mempl = pos('*',mempat) - 1
       mempat = left(mempat,mempl)
       end
    else mempl = 0

    do i = 1 to in.0
      if left(in.i,1) = '1' then iterate
      if word(in.i,1) = 'NEW:' then iterate
      if left(in.i,3) = ' **' then do
        mem = word(in.i,2)
        if mempl > 0
           then if left(mem,mempl) /= mempat
              then iterate
        crf = 1
        'tbadd' stats
        ecount = ecount + 1
      end
      if word(in.i,1) = 'NON-PAIRED' then do
        np = 1
        iterate
      end
      if pos('PDS LINE',in.i) > 0 then leave
      if np = 1 then do
        parse value in.i with . 9 memto 17 . 49   memfrom 57 .
        if strip(memto) /= null then do
          mem = strip(memto)
          if mempl > 0
             then if left(mem,mempl) /= mempat
                then iterate
          cr = 'Not in From PDS'
          crf = 1
          if donly = 'y' then iterate
          'tbadd' stats
          ecount = ecount + 1
        end
        if strip(memfrom) /= null then do
          mem = strip(memfrom)
          if mempl > 0
             then if left(mem,mempl) /= mempat
                then iterate
          cr = 'Not in To PDS'
          crf = 1
          'tbadd' stats
          ecount = ecount + 1
        end
      end
    end
  end

  zerrsm   = ecount 'Copy Eligible'
  zerrlm   = ecount 'members eligible to be Copied.'
  'Setmsg Msg(isrz002)'

  if ecount = 0 then
  if wordpos('QUICK',opt) > 0
  then do
    'tbend' stats
    call done
  end

  /* --------------------------------- *
  | Process the options for ONLY parm |
  * --------------------------------- */
  if wordpos('ONLY',opt) > 0 then zcmd = 'ONLY'

  /* ---------------------------------------------------- *
  | Sort the table and then display the table of members |
  * ---------------------------------------------------- */
  'tbsort' stats 'fields(mem,c,a)'
  ztdsels = 0
  src     = 0
  crp     = 1
  rowcrp  = 0
  do forever
    parse value '' with cr zerrsm
    if zcmd = null then do
      if src = 4 then "TBDispl" stats
      else do
        "TBTOP" stats
        "TBSKIP" stats "NUMBER("crp")"
        if rowcrp = 0 then
        "TBDISPL" stats "PANEL(zSynct)"
        else
        "TBDISPL" stats "PANEL(zSynct)",
          "CSRROW("rowcrp") AUTOSEL(NO)"
      end
      src = rc
      crp = ztdtop
      if src > 4 then leave
    end

    /* --------------------------------------------- *
    | Now process the table commands and selections |
    * --------------------------------------------- */
    if abbrev('FLIP',word(zcmd,1),2) = 1 then zcmd = 'ZSWAP'
    if zcmd /= null then
    Select
      /* ------------------------------ *
      | Copy all copy eligible members |
      * ------------------------------ */
      When abbrev('COPY',word(zcmd,1),2) = 1 then do
        'tbtop' stats
        count = 0
        do forever
          'tbskip' stats
          if rc > 0 then leave
          if cr = null then iterate
          if cr = 'Copied' then iterate
          if crf /= 1 then iterate
          if word(zcmd,2) = null
          then x=copy_mem(mem)
          else x = 0
          if x = 0 then do
            cr = 'Copied'
            if word(zcmd,2) /= null
            then cr = 'Copy Simulated'
            count = count + 1
          end
          else cr = zerrlm
          'tbput' stats
        end
        zerrsm   = count 'Copied'
        zerrlm   = 'Copied' count 'members from' frompds 'to' topds
        'Setmsg Msg(isrz002)'
      end
      /* ------------------------------------------- *
      | Locate routine                              |
      |                                             |
      | find the first/next member that matches the |
      | provided member name or that is close if    |
      | a partial name is provided.                 |
      * ------------------------------------------- */
      When abbrev('LOCATE',word(zcmd,1),1) = 1 then do
        'tbtop' stats
        srchmem = word(zcmd,2)
        if srchmem = null then do
          zerrsm = 'Invalid'
          zerrlm = 'No Locate member provided'
          'Setmsg msg(isrz002)'
          leave
        end
        do forever
          'tbskip' stats 'rowid(newcrp)'
          if rc > 0 then do
            'tbtop' stats
            leave
          end
          if mem >= srchmem then do
            crp = newcrp
            zerrsm = 'Located'
            zerrlm = srchmem 'located'
            'Setmsg msg(isrz002)'
            leave
          end
        end
      end
      /* ---------------------------------------------- *
      | Only routine                                   |
      |                                                |
      | Remove all members that are NOT copy eligible. |
      * ---------------------------------------------- */
      When abbrev('ONLY',word(zcmd,1),2) = 1 then do
        'tbtop' stats
        do forever
          'tbskip' stats
          if rc > 0 then do
            'tbtop' stats
            leave
          end
          if crf /= 1 then 'tbdelete' stats
        end
      end
      /* ------------------------------------------------------- *
      | Save routine                                            |
      |                                                         |
      | Save the current table of members, with ispf stat info, |
      | to a dataset.                                           |
      * ------------------------------------------------------- */
      When abbrev('SAVE',word(zcmd,1),1) = 1 then do
        'tbtop' stats
        drop report.
        rn = 0
        rn = rn + 1
        report.rn = '1'center('ZSYNC Report' date(),80)
        rn = rn + 1
        report.rn = '  '
        rn = rn + 1
        report.rn = ' From PDS:' frompds
        rn = rn + 1
        report.rn = ' To PDS:  ' topds
        if mempat /= null then do
          rn = rn + 1
          report.rn = ' Filter:  ' mempat
        end
        rn = rn + 1
        report.rn = '  '
        rn = rn + 1
        report.rn = ' ' left('Member',9) left('Create',10),
          left('Modified',10) left('Time',5) center('V.M',5) ,
          right('Size',7) right('Initial',7) right('Mod',7) ,
          left('Userid',8) 'Delta'
        rn = rn + 1
        report.rn = '  '
        do forever
          'tbskip' stats
          if rc > 0 then do
            'tbtop' stats
            leave
          end
          parse value from.mem with fmdate fmtime fcdate fvers ,
            fmod fcnorc finorc fmnorc fuser
          if finorc /= null then finorc = finorc + 0
          parse value to.mem with tmdate tmtime tcdate tvers ,
            tmod tcnorc tinorc tmnorc tuser
          if finorc /= null then finorc = finorc + 0
          rn = rn + 1
          if cr /= null then delta = 'Delta'
          else delta = null
          if from.mem = null
          then report.rn = ' ' left(mem,9) 'No ISPF Statistics'
          else report.rn = ' ' left(mem,9) left(fcdate,10) left(fmdate,10),
            left(fmtime,5)  center(fvers'.'fmod,5) ,
            right(fcnorc,7) right(finorc,7) right(fmnorc,7) ,
            left(fuser,8) delta
          rn = rn + 1
          if to.mem = null
          then report.rn = left(' ',11) 'No ISPF Statistics'
          else report.rn =  left(' ',11) left(tcdate,10) left(tmdate,10),
            left(tmtime,5) center(tvers'.'tmod,5) ,
            right(tcnorc,7) right(tinorc,7) right(tmnorc,7) ,
            left(tuser,8)
        end
        'control display save'
        if sysvar('syspref') /= userid()
        then reportds = "'"sysvar('syspref')".zsync.report'"
        else reportds = 'zsync.report'
        call outtrap 'x.'
        Address TSO
        'Delete' reportds
        call outtrap 'off'
        bdd = 'zsyn'random(9999)
        'alloc f('bdd') unit(sysda) space(5,5) tr' ,
          'dataset('reportds') new' ,
          'recfm(v b a) lrecl(94) blksize(0)'
        'execio * diskw' bdd '(finis stem report.'
        'Free f('bdd')'
        Address ISPExec
        'Control Display Save'
        'Edit dataset('reportds')'
        'Control Display Restore'
      end
      /* ------------------------------------- *
      | Refresh routine                       |
      |                                       |
      | Rebuild the member list from scratch. |
      * ------------------------------------- */
      When abbrev('REFRESH',word(zcmd,1),2) = 1 then do
        drop from. to.
        'tbend' stats
        "LMFree  Dataid("fromid")"
        "LMFree  Dataid("toid")"
        if word(zcmd,2) /= null then mempat = word(zcmd,2)
        signal Refresh
      end
      /* ------------------------------------ *
      | ZSwap routine                        |
      |                                      |
      | Swap the To and From datasets names. |
      * ------------------------------------ */
      When abbrev('ZSWAP',word(zcmd,1),2) = 1 then do
        drop from. to.
        'tbend' stats
        "LMFree  Dataid("fromid")"
        "LMFree  Dataid("toid")"
        ofrompds = frompds
        ofvol    = fvol
        frompds  = topds
        fvol     = tvol
        topds    = ofrompds
        tvol     = ofvol
        signal Refresh
      end
      /* ------------------------------------------------- *
      | Sort routine                                      |
      |                                                   |
      | Sort by member or state  (mem or state)           |
      | optional parm of A or D (ascending or descending) |
      * ------------------------------------------------- */
      When abbrev('SORT',word(zcmd,1),1) = 1 then do
        parse value zcmd with cmd sfield order
        if order = null then so = 'a'
        else select
          When order = 'A' then so = 'a'
          When order = 'D' then so = 'd'
          otherwise do
            zerrsm = zcmd 'Unknown'
            zerrlm = order 'is an unknown sort order (A/D)'
            'setmsg msg(isrz002)'
          end
        end
        if left(sfield,1) = 'M' then
        'tbsort' stats 'fields(mem,c,'so')'
        if left(sfield,1) = 'S' then
        'tbsort' stats 'fields(cr,c,'so')'
      end
      Otherwise do
        zerrsm = zcmd 'Unknown'
        zerrlm = zcmd 'is an unknown command'
        'setmsg msg(isrz002)'
      end
    end
    zcmd = null

    /* ------------------------------------- *
    | Process the Member Selection Commands |
    * ------------------------------------- */
    if csel /= '=' then hold_sel = csel
    else csel = hold_sel
    If csel = 'S' then csel = '/'
    If csel = '/' then do forever
      csel = null
      'Addpop row(2) column(5)'
      'display panel(zSyncs)'
      xc = rc
      'rempop'
      if xc > 0 then leave
      if zcmd /= null then csel = zcmd
      if zcmd = null then iterate
      zcmd = null
      leave
    end
    if csel = 'C' then
    if sysrecfm = 'U'
    then csel = 'CS'
    if csel /= null then
    Select
      /* ----------------------------------------------------------- *
      | I selection                                                 |
      |                                                             |
      | Display the ISPF Stat information on the from and to member |
      * ----------------------------------------------------------- */
      When csel = 'I' then do
        if ignore_stats = 1 then do
          ispf_stats = get_stats(mem frompds fvol)
          from.mem = ispf_stats
          ispf_stats = get_stats(mem topds tvol)
          to.mem = ispf_stats
        end
        'control display save'
        'Addpop row(2) column(5)'
        if sysrecfm /= 'U' then do
          parse value from.mem with fmdate fmtime fcdate fvers ,
            fmod fcnorc finorc fmnorc fuser
          parse value to.mem with tmdate tmtime tcdate tvers ,
            tmod tcnorc tinorc tmnorc tuser
          'display panel(zcispf)'
        end
        else do
          parse value from.mem with flsize flamode flrmode ,
            flattr flalias flssi
          parse value to.mem with tlsize tlamode tlrmode ,
            tlattr tlalias tlssi
          'display panel(zcispfU)'
        end
        'rempop'
        'control display restore'
      end
      /* ---------------------------------------- *
      | X selection                              |
      |                                          |
      | Delete the selected member from the list |
      * ---------------------------------------- */
      When csel = 'X' then 'tbdelete' stats
      /* ---------------------- *
      | Browse routine         |
      |                        |
      | Browse the From member |
      * ---------------------- */
      When csel = 'B' then do
        'Control Display Save'
        'Browse Dataid('fromid') Member('mem')'
        'Control Display Restore'
        if zerrsm /= null then 'setmsg msg(isrz003)'
      end
      /* ------------------------ *
      | Edit selection           |
      |                          |
      | Edit the selected member |
      * ------------------------ */
      When csel = 'E' then do
        'Control Display Save'
        'Edit Dataid('fromid') Member('mem')'
        'Control Display Restore'
        if zerrsm /= null then 'setmsg msg(isrz003)'
      end
      /* -------------------- *
      | Browse To routine    |
      |                      |
      | Browse the To member |
      * -------------------- */
      When csel = 'BT' then do
        'Control Display Save'
        'Browse Dataid('toid') Member('mem')'
        'Control Display Restore'
        if zerrsm /= null then 'setmsg msg(isrz003)'
      end
      /* ------------------ *
      | Edit To routine    |
      |                    |
      | Edit the To member |
      * ------------------ */
      When csel = 'ET' then do
        'Control Display Save'
        'Edit Dataid('toid') Member('mem')'
        'Control Display Restore'
        if zerrsm /= null then 'setmsg msg(isrz003)'
      end
      /* ----------------------------------------------- *
      | Compare the member (from/to)using the ISPF Edit |
      | Compare command with eXclude                    |
      * ----------------------------------------------- */
      When wordpos(csel,'C CF') > 0 then do
        if pos('Not in',cr) > 0 then do
          zerrsm = 'Not Supported'
          zerrlm = 'Member' mem 'is not in the To PDS so it cannot' ,
            'be compared.'
          'Setmsg Msg(isrz002)'
        end
        else do
          oldds = fixup_dsn(frompds)
          if fvol /= null
             then finit = 'VOLUME('fvol')'
             else finit = null
          parm  = fixup_dsn(topds)
          if tvol /= null then
             parm = parm 'VOL('tvol')'
          parm = parm '/' oldds
          "LMINIT DATAID(fromid) DATASET("frompds")" finit
          "LMOPEN DATAID("fromid") OPTION(INPUT)"
          'Control Display Save'
          'edit dataid('fromid') member('mem') macro(zsyncm)' ,
            'parm(parm)'
          'Control Display Restore'
          'vget (xcr)'
          cr = xcr
          if xcr = 'Delta' then crf = 1
          else crf = 0
          'tbput' stats
          "LMClose Dataid("fromid")"
        end
      end
      /* ----------------------------------------------- *
      | Compare the member (to/from)using the ISPF Edit |
      | Compare command with eXclude                    |
      * ----------------------------------------------- */
      When csel = 'CT' then do
        if pos('Not in',cr) > 0 then do
          zerrsm = 'Not Supported'
          zerrlm = 'Member' mem 'is not in the To PDS so it cannot' ,
            'be compared.'
          'Setmsg Msg(isrz002)'
        end
        else do
          oldds = fixup_dsn(topds)
          parm  = fixup_dsn(frompds)
          parm = parm oldds
          "LMINIT DATAID(toid) DATASET("topds")"
          "LMOPEN DATAID("toid") OPTION(INPUT)"
          'Control Display Save'
          'edit dataid('toid') member('mem') macro(zsyncm)' ,
            'parm(parm)'
          'Control Display Restore'
          'vget (xcr)'
          cr = xcr
          if xcr = 'Delta' then crf = 1
          else crf = 0
          'tbput' stats
          "LMClose Dataid("toid")"
        end
      end
      /* ------------------------------------------- *
      | CS and CD routines                          |
      |                                             |
      | Compare using ISPF SuperC                   |
      |                                             |
      | CS - compare and display the SuperC report  |
      | CD - compare and then update the state only |
      * ------------------------------------------- */
      When wordpos(csel,'CS CD') > 0 then do
        if pos('Not in',cr) > 0 then do
          zerrsm = 'Not Supported'
          zerrlm = 'Member' mem 'is not in the To PDS so it cannot' ,
            'be compared.'
          'Setmsg Msg(isrz002)'
        end
        else do
          Address TSO
          call outtrap 'x.'
          'Free f(olddd newdd outdd)'
          drop in.
          call outtrap 'off'
          oldds = fixup_dsn(frompds)
          newds = fixup_dsn(topds)
          if tvol = null
             then atvol = null
             else atvol = 'vol('tvol')'
          if fvol = null
             then afvol = null
             else afvol = 'vol('fvol')'
          'alloc f(olddd) ds('oldds') shr reuse' afvol
          'alloc f(newdd) ds('newds') shr reuse' atvol
          'alloc f(outdd) new spa(15,15) tr reuse' ,
            'recfm(v b) lrecl(125) blksize(0) unit(sysda)'
          Address ISPexec ,
            'Select PGM(isrsupc) Parm(DELTAL,LINECMP)'
          'execio * diskr outdd (finis stem in.'
          'free f(olddd newdd outdd)'
          Address ISPexec
          crf = 0
          cr = 'Identical'
          do ci = 1 to in.0
            if pos('TOTAL CHANGES',in.ci) > 0 then
            if word(in.ci,6) > 0 then crf = 1
            if crf = 1 then cr = 'Delta'
            if crf = 1 then leave
          end
          if csel = 'CS' then do
            if pos('Not in',cr) > 0 then do
              zerrsm   = 'Not Applicable.'
              zerrlm   = 'Can not compare when one library does',
                'not have the member.'
              'Setmsg Msg(isrz002)'
            end
            else do
              Address TSO
              bdd = 'zsyn'random(9999)
              'alloc f('bdd') unit(sysda) space(5,5) tr' ,
                'recfm(v b a) lrecl(125) blksize(0)'
              'execio * diskw' bdd '(finis stem in.'
              Address ISPExec
              "LMINIT DATAID(lmb) DDNAME("bdd")"
              'Control Display Save'
              'View dataid('lmb')'
              'Control Display Restore'
              "LMFree  Dataid("lmb")"
              Address TSO 'Free f('bdd')'
            end
          end
          'tbput' stats
        end
      end
      /* ------------------------------------------------ *
      | Z routine                                        |
      |                                                  |
      | Copy the selected member regardless of the state |
      | of copy eligibility.                             |
      * ------------------------------------------------ */
      When csel = 'Z' then do
        x = copy_mem(mem)
        if rc = 0 then cr = 'Copied'
        else cr = zerrlm
        crf = 0
        'tbput' stats
      end
      Otherwise nop
    end
    csel = null
  end
  'tbend' stats

  /* --------------------------------------------------- *
  | Close the current set of datasets and return to the |
  | prompting panel.                                    |
  * --------------------------------------------------- */
  redo = 1
  if wordpos('ONCE',opt) = 0 then
  call check_dsns

  /* ----------------- *
  | Clean up and exit |
  * ----------------- */
Done:
  if toid /= 'TOID' then 'lmfree dataid('toid')'
  if fromid /= 'FROMID' then 'lmfree dataid('fromid')'
  rc = dropispf(load_info)
  Exit 0

Check_Records:
  if tl = fl then return 0
  crf = 1
  if tl > fl
    then cr = cr', To has more records'
    else cr = cr', From has more records'
  return 1

Get_Stats: Procedure Expose sysrecfm null
  arg statmem statpds statvol
  statpds = strip(statpds)
  statmem = strip(statmem)
  if statvol /= null
     then statvol = 'VOLUME('statvol')'
  "LMINIT DATAID(statid) DATASET("statpds")" statvol
  "LMQUERY Dataid("statid") DATASET(QDSN)"
  "LMOPEN DATAID("statid") OPTION(INPUT)"
  "LMMFIND Dataid("statid") MEMBER("statmem")" ,
    "STATS(YES)"
  if rc > 3 then stats = '  '
  else do
    if sysrecfm /= 'U' then
    stats = zlm4date zlmtime ,
      zlc4date zlvers zlmod zlcnorc zlinorc zlmnorc zluser
    else stats = zlsize zlamode zlrmode zlattr zlalias zlssi
  end
  "LMClose Dataid("statid")"
  return stats

  /* --------------------------------------------------- *
  | Check_Delta routine to check for differences if the |
  | members have no ispf stats.                         |
  * --------------------------------------------------- */
Check_Delta:
  xcr = null
  oldds = fixup_dsn(frompds)
  if fvol /= null
     then finit = 'VOLUME('fvol')'
     else finit = null
  parm  = fixup_dsn(topds)
  if tvol /= null then
     parm = parm 'VOL('tvol')'
  parm = parm '/' oldds 'check'
  "LMINIT DATAID(dfrom) DATASET("frompds")" finit
  "LMOPEN DATAID("dfrom") OPTION(INPUT)"
  'edit dataid('dfrom') member('mem') macro(zsyncm)' ,
    'parm(parm)'
  "LMClose Dataid("dfrom")"
  "LMFree Dataid("dfrom")"
  'vget (xcr)'
  if xcr = 'Delta' then do
    crf = 1
    cr = 'Delta - No ISPF Stats'
    ecount = ecount + 1
  end
  else do
    cr = 'Identical - No ISPF Stats'
    crf = 0
  end
  return


  /* ---------------------------------------------------------- *
  | fixup_dsn routine to provide a fully qualified dsname with |
  | quotes to be used.                                         |
  * ---------------------------------------------------------- */
Fixup_dsn: Procedure expose mem
  arg fixdsn
  if left(fixdsn,1) = "'" then do
    parse value fixdsn with "'"fixdsn"'"
    newdsn = "'"fixdsn"("mem")'"
  end
  else newdsn = fixdsn'('mem')'
  return newdsn

  /* ------------------------------- *
  | Copy the member from From to To |
  * ------------------------------- */
Copy_Mem:
  arg copymem
  'lmcopy fromid('fromid') frommem('copymem')' ,
    'todataid('toid') replace trunc'
  if rc = 0 then
  'log msg(ZS001)'
  return rc

Prompt:
  parse value '' with null flrecl tlrecl trwarn redo ,
    hold_sel zcmd
  do forever
    if ignore_stats = 1 then igstats = 'Y'
    else igstats = 'N'
    'Display Panel(zSync)'
    if rc > 0 then call done
    if igstats = 'Y' then ignore_stats = 1
    else ignore_stats = 0
    leave
  end
  'vput (fvol tvol) shared'
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    load_info = loadispf()                          *
 *            rc = dropispf(load_info)                        *
 *                                                            *
 *            *** Note that dropispf is a routine at the      *
 *            *** bottom of this exec.                        *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          rc = dropispf(load_info)                          *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            01/09/19 - Include DROPISPF routine             *
 *            08/29/17 - Fixup static values that were vars   *
 *            05/31/17 - Change default directory count       *
 *            12/09/16 - update for add_it routine            *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
  Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
  end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      Otherwise nop
    end
  end
  if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
Add_It:
  Select
    When type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
  end
  type = null
  return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
DropISPF: Procedure
  arg load_info
  Address ISPEXEC
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
      if libd = "ALTLIBC" then lib = "CLIST"
      else lib = "EXEC"
      Address TSO,
        "Altlib Deact Application("lib")"
    end
    else "libdef" libd
    address tso "free f("dd")"
  end
  return 0

  /* --------------------------- *
  | The start for inline panels |
  * --------------------------- */
>Start
>Panel #zs
)ATTR DEFAULT(@$_)
@   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
$   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) Color(Green)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
@Tutorial$-\-\(@zSync$)-\-\@Tutorial
@Command ===>_ZCMD
$
@zSync$Will copy New and Updated Members from One PDS to Another
$
@Commands:
@
@  @COpy$   Copy all eligible members in the list
$           a non-blank option simulates the Copy
$  @Flip$   Alias of ZSwap
$  @Locate$ Locate a member in the list (partial name allowed)
$  @Only$   Display only copy eligible members
$  @Refresh$Refresh the member list after use of Only or X
$           optional member pattern  (Refresh AB* or Refresh *)
$  @Save$   Save a report of both members and statistics
$  @Sort$   Sort Member order or Sort State order (order = A or D)
$  @ZSwap$  Swap dataset names and refresh the member list
$
$   Note: Copy messages are placed in the ISPF Log dataset.
$
$
$ \ \ (press@ENTER$to continue) \ \
)INIT
 &zcont = #zs1
)PROC
)END
>Panel #zs1
)ATTR DEFAULT(@$_)
@   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
$   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) Color(Green)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
@Tutorial$-\-\(@zSync$)-\-\@Tutorial
@Command ===>_ZCMD
$
@zSync$Will copy New and Updated Members from One PDS to Another
$
@Line Selections:
@
@  @B$      - Browse the From member
$  @BT$     - Browse the To member
$  @C$      - ISPF Edit Compare
$  @CD$     - SuperC Compare
$  @CS$     - SuperC Compare and View
$  @E$      - Edit the From member
$  @ET$     - Edit the To member
$  @I$      - ISPF Stats
$  @S$or@/$ - Display Selection prompt
$  @X$      - Exclude the member
$  @Z$      - Copy member
$  @=$      - Repeat previous selection
$
$
$ \ \ (press@ENTER$to continue) \ \
)INIT
 &zcont = #zs2
 &zup   = #zs
)PROC
)END
>Panel #zs2
)ATTR DEFAULT(@$_)
@   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
$   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) Color(Green)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
@Tutorial$-\-\(@zSync$)-\-\@Tutorial
@Command ===>_ZCMD
$
@zSync$State Descriptions
$       Copied       - Member copied
$       Delta        - Members are different per SuperC Compare
$       Identical    - Members are the same per SuperC Compare
$
$Self Explanatory States
$       Delta - No ISPF Stats
$       From Date newer than To Date
$       From Date/Time is newer than To Date/Time
$       Identical - No ISPF Stats
$       No ISPF From or To Stats
$       No ISPF From Stats
$       No ISPF To Stats
$       Not in To PDS
$       To Date is blank
$       To Date newer than From Date
$       To Date/Time is newer than From Date/Time
$
$ \ \ (press@ENTER$to continue) \ \
)INIT
 &zup = #zs1
 &zcont = #zs3
)PROC
)END
>Panel #zs3
)ATTR DEFAULT(@$_)
@   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
$   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) Color(Green)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
@Tutorial$-\-\(@zSync$)-\-\@Tutorial
@Command ===>_ZCMD
$
@zSync$Rules
$
$       1. Both PDS datasets must exist
$       2. PDSE Member Generations and Load Libraries are not supported
$       3. Members in the FROM that do not exist in the TO PDS will be copied
$       4. Members in the TO that do not exist in the FROM PDS are ignored
$       5. Members in the FROM PDS with a newer date in the ISPF
$          Statistics will be copied
$       6. Members with no ISPF Stats in either From or To or both will be
$          compared and if different will be copy eligible
$       7. Use CD to use SuperC to determine if the member is different
$          or CS to use SuperC and view the results
$       8. The Member display table is scrollable left/right to view
$          Copy state messages that may be longer than will fit.
$       9. Use selection Z to copy just the one member
$      10. Use the member pattern to limit the display
$      11. Use REFRESH member to change the active member pattern
$
$ \ \ (press@ENTER$to continue) \ \
)INIT
 &zup = #zs2
 &zcont = #zs
)PROC
)END
>Panel zSync
)Attr Default(@+_)
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low) Color(Green) Skip(on)
# type(output) intens(low) hilite(reverse)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)Body expand(\\)
@-\-\+zSync Dataset Prompt#zver@\-\-
@Command ===>_zcmd
+
+From PDS Dataset:$frompds                                       +Vol:$fvol  +
+To   PDS Dataset:$topds                                         +Vol:$tvol  +
+Member Pattern:  $mempat  +   (not supported when RECFM=U)
+Ignore ISPF Stats: $z+   Yes or No
+Display Delta Only:$z+   Yes or No
+
+Compare two PDS Libraries and identify differences between From
+and To libraries to simplify copying new/changed members.
+
+Member Pattern:  *ABC, ABC*, *ABC*, %BC*
+                 * = multiple characters
+                 % = single character
+
+Note: If the From PDS LRECL is greater than the To PDS LRECL then DCB
+      information on the From and To libraries will be presented on the member
+      display.  This does not guarantee a truncation will occur as that
+      depends on the actual data. Just be aware before doing a copy.
+
+ \ \ (press@ENTER+to Continue@PF3+to Cancel) \ \
)Init
 .zvars = '(igstats donly)'
 if (&igstats = &z)
     &igstats = 'N'
 if (&donly   = &z)
     &donly   = 'N'
 if (&frompds = &z)
     .cursor = frompds
 if (&frompds NE &z)
    if (&topds = &z)
        .cursor = topds
    if (&topds NE &z)
        .cursor = mempat
 .help = #zs
)Proc
 ver (&frompds,nb,dsnameq)
 ver (&topds,nb,dsnameq)
 ver (&igstats,nb,list,Y,N)
 ver (&donly,nb,list,Y,N)
)End
>Panel zSynProg
)Attr Default(%+_)
@ type(output) intens(high)  caps(off) just(left )
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low) color(green)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)Body window(56,5) expand(\\)
%-\-\+zSync Progress%\-\-
+
   @progress
   @progdsn
+
)Init
)Proc
)End
>Panel zSyncs
)Attr Default(%+_)
@ type(text  ) intens(high)  caps(off) just(left )
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low) color(Green)
)Body window(56,17) expand(\\)
%-\-\+zSync Selection Prompt%\-\-
%Option ===>_zcmd
+
+Valid member selection options:
+
+ @B+  - Browse the From member
+ @BT+ - Browse the To member
+ @C+  - Compare the members using ISPF Edit Compare
+ @CD+ - Compare members using SuperC
+ @CS+ - Compare members using SuperC and View Results
+ @E+  - Edit the From member
+ @ET+ - Edit the To member
+ @I+  - Display ISPF Stats
+ @X+  - Remove (exclude) the member from processing
+ @Z+  - Copy the selected member
+
+ \ \ (Enter an Option to Continue or%PF3+to Cancel) \ \
)Init
 .help = #zs
)Proc
 ver (&zcmd,list,B,BT,E,ET,C,CD,CS,I,X,Z)
)End
>Panel zcispf
)Attr Default(%+_)
@ type(output) intens(high)  caps(off) just(left )
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low) Color(Green)
)Body window(44,14) expand(\\)
%-\-\+zSync Member Info%\-\-
%Command ===>_zcmd
+
+Member Name:  @mem
+From                            To
+Create Date:  @fcdate         +@tcdate
+Mod Date:     @fmdate         +@tmdate
+Mod Time:     @fmtime         +@tmtime
+Size:         @fcnorc         +@tcnorc
+Ver:          @fvers          +@tvers
+Mod:          @fmod           +@tmod
+User:         @fuser          +@tuser
+
+ \ \ (press%ENTER+to Continue) \ \
)Init
 .help = #zs
)Proc
)End
>Panel zcispfu
)Attr Default(%+_)
@ type(output) intens(high)  caps(off) just(left )
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low) Color(Green)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)Body window(44,13) expand(\\)
%-\-\+zSync Member Info%\-\-
%Command ===>_zcmd
+
+Member Name:  @mem
+From                            To
+Size:         @flsize         +@tlsize
+AMODE:        @flamode        +@tlamode
+RMODE:        @flrmode        +@tlrmode
+LE Attributes:@flattr         +@tlattr
+Alias:        @flalias        +@tlalias
+SSI:          @flssi          +@tlssi
+
+ \ \ (press%ENTER+to Continue) \ \
)Init
 .help = #zs
)Proc
)End
>Panel zSynct
)Attr Default(%+_)
  @ type(output) intens(high) just(left ) caps(off)
  # type(output) intens(low)  just(left ) caps(off) Color(Green)
  $ type(output) intens(high) caps(off) just(left ) color(red)
  + type(text) intens(low) Color(Green)
  _ type(input) intens(high) caps(on) hilite(uscore)
)Body  expand(\\)
%-\-\+zSync Member List#zver%\-\-
%Command ===>_zcmd                                            %Scroll ===>_amt +
+
%   From:#frompds                                          +Vol:#fvol
%     To:@topds                                            +Vol:@tvol
%Pattern:#mempat
+        $trwarn
% Sel   Member    State
)Model
 +_z + #z        @z
)Init
 .zvars = '(csel mem cr)'
 .help = #zs
 if (&amt = &z)
     &amt  = csr
)Proc
 ver (&csel,list,I,X,C,B,BT,E,ET,CD,CS,/,S,Z,'=')
 &amt = trans(trunc(&amt,1),H,HALF,C,CSR,P,PAGE,*,*)
)Field
 Field(cr) ind(mpind,'<>') len(255) scale(lr1sc)
)End
>Msg ZS00
ZS001 'zSync Command'
'Copied from &FROMPDS to &TOPDS'
>EXEC zsyncm
/* rexx */
 Address ISREdit
 'macro (parm)'
 parse value parm with parm '/' fromds opt
 xcr = ''
 'compare' parm 'x'
 '(dataset) = dataset'
 '(member) = member'
 '(fvol)   = volume'
 fvol = 'Vol('fvol') '
 msg = "Comparing '"dataset"("member")'" fvol'to' parm
 if length(msg) > 70 then do
      msg = 'to' parm
     'line_after ' 0 '= msgline "'msg'"'
      msg = "Comparing '"dataset"("member")'" fvol
     'line_after ' 0 '= msgline "'msg'"'
    end
 else 'line_after ' 0 '= msgline "'msg'"'
 'locate label first'
 if rc = 0 then xcr = 'Delta'
 if rc > 0 then do
    'locate exclude first'
    if rc = 0 then do
       "find P'¬' first nx"
       if rc = 0
          then xcr = 'Delta'
          else xcr = 'Identical'
       end
       end
 address ispexec 'vput (xcr)'
 if opt = '' then 'locate msgline first'
             else 'end'
>EXEC zsyncmw
/* rexx */
 Address ISREdit
 'macro (parm)'
 '(dwidth)   = data_width'
 'vput (dwidth)'
 'end'
>end
