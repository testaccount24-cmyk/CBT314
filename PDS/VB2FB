/* --------------------  rexx procedure  -------------------- */
 ver = '2.9'
/* Name:      VB2FB                                           *
 *                                                            *
 * Function:  Copy Fixed to Variable or Variable to Fixed     *
 *                                                            *
 *            Tests the in dataset members to determine       *
 *            if there will be any data truncation before     *
 *            starting the copy operation.                    *
 *                                                            *
 * Syntax:    %vb2fb in out members ( options                 *
 *                                                            *
 *            in        input dataset name                    *
 *            out       output dataset name                   *
 *            members   * for all                             *
 *                      member names                          *
 *                      member name pattern (e.g. abc*)       *
 *            (         required if options coded             *
 *            options   REPlace for replace                   *
 *                      TRunc   for truncation allow3ed       *
 *                      NORenum to bypass renumbering         *
 *                                                            *
 * Notes:                                                     *
 *           1. The ISPF Panels and Edit Macros that are      *
 *              used by this exec are included inline below   *
 *              and loaded dynamically using the LoadISPF     *
 *              routine.                                      *
 *           2. If a member will be truncated during the      *
 *              copy, and truncation has NOT been allowed,    *
 *              then the member will be placed into ISPF      *
 *              Edit and those records that may be            *
 *              truncated will be displayed with all other    *
 *              records hidden. (uses edit macro EMT)         *
 *           3. If the from member has ISPF sequence numbers  *
 *              then the to member will be updated after the  *
 *              copy to fix the sequence numbers (used edit   *
 *              macros EM1 and EM2).                          *
 *              - unless NORenum option is specified          *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            10/11/17 - 2.9 Cosmetic change to panel (JK)    *
 *            12/02/16 - 2.8 Fix use of zsvc* vars            *
 *            05/23/16 - 2.7 Fix counter if only 1 member     *
 *            05/18/16 - 2.6 Take advantage of 2 'new'        *
 *                           variables zsvccpy and            *
 *                           zsvcncpy                         *
 *            05/17/16 - 2.5 Clean up ISPF Test               *
 *                           Thanks to John Kalinich          *
 *            05/17/16 - 2.4 Verify called under ISPF         *
 *            05/16/16 - 2.3 Correction to the code and       *
 *                           if called outside of the         *
 *                           ispf dialog then renum will      *
 *                           NOT occur.                       *
 *            05/16/16 - 2.2 New, Improved Name VB2FB from    *
 *                           COPYFVVF (thx John Kalinich)     *
 *            05/16/16 - 2.1 Bug fix if no members selected   *
 *                           from ? member list               *
 *            05/11/16 - 2.0 Support changing sequence        *
 *                           numbers if the source is         *
 *                           numbered using edit macros       *
 *                           included in the code below       *
 *                           - add edit macro for truncation  *
 *                             warning                        *
 *                           - add NoRenum option             *
 *            05/09/16 - 1.9 Get command from parse source    *
 *            05/06/16 - 1.8 Panel cleanup                    *
 *            05/06/16 - 1.7 Minor cleanup.                   *
 *            05/06/16 - 1.6 Corrections to minor bugs        *
 *                           - if trunc specified don't check *
 *                           - support multiple members       *
 *                           - save in/out in ispf profile    *
 *            05/06/16 - 1.5 If no members or member is ?     *
 *                           display member list to select    *
 *            05/05/16 - 1.4 If no parameters then display    *
 *                           prompting panel                  *
 *            05/04/16 - 1.3 If all members are ok then       *
 *                           set TRunc to override LM         *
 *            04/28/16 - 1.2 Display member list if           *
 *                           members will be truncated        *
 *                           and TRUNC was not specified      *
 *            04/26/16 - 1.1 Update to test for truncation    *
 *            04/26/16 - 1.0 Creation                         *
 *                                                            *
 * ---------------------------------------------------------- */

/* ---------------------------------- *
 * Process the processing information *
 * ---------------------------------- */
 arg input_options
 parse value input_options with in out members "(" options

/* ------------------------ *
 * Verify called under ISPF *
 * ------------------------ */
 if sysvar('sysispf') /= 'ACTIVE'
    then if sysvar('sysenv') = 'FORE'
       then do
           "ISPF Cmd(%"sysvar('sysicmd') input_options ") Newappl(ISR)"
            exit 0
            end
  else do
    say 'Error. This tool cannot be used outside of ISPF.'
    exit 16
    end

/* --------------- *
 * define defaults *
 * --------------- */
 parse value '' with null replace trunc bad_members ,
                     panel r t n norenum ispf
 ddn = "CFV"random(9999)

/* --------------------------- *
 * Get the active command name *
 * --------------------------- */
 parse source x y command .

 Address ISPexec
 "Control Errors Return"

/* ---------------------------------- *
 * Test for input and output datasets *
 * ---------------------------------- */
 if strip(in) = null then do
    indsn = in
    panel = 1
    end
 if strip(out) = null then do
    outdsn = out
    panel = 1
    end
 if strip(members) = null then do
    panel = 1
    mem = members
    end
 if pos('ISPF',options) > 0 then do
    panel = null
    end

/* ---------------------------------------- *
 * Test for need to display prompting panel *
 * ---------------------------------------- */
 if panel = 1 then do
    load_info = loadispf()
    'vget (cfvin cfvout) profile'
    indsn  = cfvin
    outdsn = cfvout
    do forever
    "Display Panel(vb2fb)"
    drc = rc
    cfvin  = indsn
    cfvout = outdsn
    'vput (cfvin cfvout) profile'
    if drc > 0 then do
       do until length(load_info) = 0
          parse value load_info with dd libd load_info
         if left(libd,6) = "ALTLIB" then do
            if libd = "ALTLIBC" then lib = "CLIST"
                                else lib = "EXEC"
            Address TSO,
              "Altlib Deact Application("lib")"
            end
         else "libdef" libd
         "libdef" libd
         address tso "free f("dd")"
         end
       exit 4
       end
    in  = indsn
    out = outdsn
    dsnok = 0
    if sysdsn(in) = "OK" then dsnok = 1
    if sysdsn(out) = "OK" then dsnok = dsnok + 1
    if dsnok = 2 then do
       if mem = null then mem = '?'
       members = mem
       options = null
       if r''t''n /= null then options = '( ISPF'
       if r = 'Y' then options = options 'REPLACE'
       if t = 'Y' then options = options 'TRUNC'
       if n = 'Y' then options = options 'NORENUM'
       if members = '?' then do
          members = null
          /* ------------------------- *
           * Prompt for members to use *
           * ------------------------- */
            "Lminit Dataid(status) Dataset("in") Enq(Shr)"
            "Lmopen Dataid("status") Option(Input)"
            "Control Errors Return"
            lmfirst = 0
             do forever
               if lmfirst = 1 then do
                  "LmmDisp Dataid("status") Option(Get)"
                  if rc = 8 then
                     "LmmDisp Dataid("status") Option(Display)"
                  end
               else do
                     "LmmDisp Dataid("status") Option(Display)"
                     lmfirst = 1
                     end
               if rc > 7 then leave
               members = members strip(zlmember)
               "Lmmdisp Dataid("status") Option(Put) Member("zlmember")",
                       "Zludata(selected)"
               end
           /* ------------------------- *
            * Close and Free the Dataid *
            * ------------------------- */
            "LMClose Dataid("status")"
            "LMFree  Dataid("status")"
          end
       if strip(members) /= null
          then "Select cmd("command in out members options ")"
          else do
               zedsmsg = "No Selection"
               zedlmsg = "No members selected for the copy."
               "Setmsg msg(isrz001)"
               end
    end
    else do
         zedsmsg = "Invalid DSN(s)"
         zedlmsg = null
         if sysdsn(in)  /= "OK" then zedlmsg = in sysdsn(in)
         if sysdsn(out) /= "OK" then zedlmsg = zedlmsg out sysdsn(out)
         "Setmsg msg(isrz001)"
         end
    end
    end

/* ---------------- *
 * Test for members *
 * ---------------- */
 if strip(members) = null then members = '*'

/* ---------------------- *
 * test the input options *
 * ---------------------- */
 if strip(options) /= null then do
    if pos("REP",options) > 0 then replace   = "Replace"
    if pos("TR",options)  > 0 then trunc     = "Trunc"
    if pos("NOR",options)  > 0 then norenum  = "Norenum"
    if pos("ISPF",options)  > 0 then ispf    = "ISPF"
    end

/* -------------------------------------------------------- *
 * Get the DCB for the input and output datasets            *
 * If the same then proceed with the copy                   *
 * If not the same then if the from has a larger lrecl than *
 *    the input then proceed with the copy                  *
 * Otherwise check each member to determine if there        *
 *    will be data truncation                               *
 * -------------------------------------------------------- */
 call listdsi in
 in_lrecl = syslrecl
 in_recfm = sysrecfm
 call listdsi out
 out_lrecl = syslrecl
 out_recfm = sysrecfm

 /* set flag if going F->V or V->F or Same */
  copyflag = left(in_recfm,1)''left(out_recfm,1)

  if left(in_recfm,1) = "V" then in_lrecl = in_lrecl - 4
  if left(out_recfm,1) = "V" then out_lrecl = out_lrecl - 4

   call get_members
   call fix_dsns

 if in_lrecl > out_lrecl then do
   /* -------------------------------- *
    * Check each member for truncation *
    * -------------------------------- */
    if trunc = null then do
       Test_Trunc:
       Address TSO
       do i = 7 to m.0
          mem = word(m.i,1)
          hit = 0
          do im = 1 to words(members)
             if word(members,im) = mem then hit = 1
             if members = '*' then hit = 1
             if hit = 0 then
             if pos('*',word(members,im)) > 0 then do
                tmem = word(members,im)
                past = pos('*',tmem)
                tmem = left(tmem,past-1)
                if left(mem,length(tmem)) = tmem then hit = 1
                end
             end
          if hit = 1 then do
             "Alloc f("ddn") shr reuse ds('"ind"("mem")')"
             "Execio * diskr" ddn" (finis stem rec."
             "Free f("ddn")"
             bad = 0
             do ir = 1 to rec.0
                if length(rec.ir) > out_lrecl then bad = 1
                end
             if bad > 0 then bad_members = bad_members mem
             end
          end
       Address ISPExec
       if bad_members /= null then do
          call fix_trunc in bad_members
          return
          end
       else trunc = 'Trunc'
       end
    end

/* ---------------------------------- *
 * LM Initialize/Allocate the datasts *
 * ---------------------------------- */
 "lminit dataid(indd1) dataset("in")"
 "lminit dataid(outdd1) dataset("out")"

/* ------------------------------- *
 * Copy the member(s) with options *
 * ------------------------------- */
 crc        = 0
 copied     = 0
 not_copied = 0
 if words(members) > 1 then
    do im = 1 to words(members)
    "lmcopy fromid("indd1") todataid("outdd1")" ,
           "frommem("word(members,im)")" replace trunc
    if rc > crc then crc = rc
    if pos('*',members) > 0 then do
       copied = copied + zsvccpy
       not_copied = not_copied + zsvcncpy
       end
    end
 else do
      "lmcopy fromid("indd1") todataid("outdd1")" ,
             "frommem("members")" replace trunc
       crc = rc
       if pos('*',members) > 0 then do
          copied = copied + zsvccpy
          not_copied = not_copied + zsvcncpy
          end
       else do
            if rc = 0 then copied = copied + 1
                      else not_copied = not_copied + 1
             end
       end

/* ---------------------------------------------- *
 * Test if the from/to RECFM are different        *
 * and if so then check for ISPF sequence numbers *
 * in the from member. If found then edit the to  *
 * member to correct the sequence numbers,        *
 * unless NORENUM was specified.                  *
 * ---------------------------------------------- */
 if crc = 0 then
 if norenum = null then
 if wordpos(copyflag,'FV VF') > 0 then do
   /* ------------------------------------ *
    * First find the members we care about *
    * ------------------------------------ */
    do i = 7 to m.0
       mem = word(m.i,1)
       hit = 0
       do im = 1 to words(members)
          if word(members,im) = mem then hit = 1
          if members = '*' then hit = 1
          if hit = 0 then
          if pos('*',word(members,im)) > 0 then do
             tmem = word(members,im)
             past = pos('*',tmem)
             tmem = left(tmem,past-1)
             if left(mem,length(tmem)) = tmem then hit = 1
             end
          if ispf /= null then
          if hit = 1 then do
                "Edit dataset('"ind"("mem")') macro(em1)"
                'vget (numstate)'
             if numstate = 'ON' then
                if norenum = null  then
                   "Edit dataset('"outd"("mem")') macro(em2)"
                end
             end
          end
       end

/* -------------------- *
 * Test the return code *
 * -------------------- */
 if crc = 0 then do
    zedsmsg = "Copy Successful"
    zedlmsg = "Copied" copied "members:" members ,
              "from" in "to" out
    if not_copied > 0 then
       zedlmsg = zedlmsg ". Not copied" not_copied
    end
 if crc > 0 then do
    zedsmsg = "Copy error"
    if pos('Like-named member already exists',zerrlm) > 0
    then zedlmsg = strip(zerrlm) "Rerun using the Replace option."
    else zedlmsg = zerrlm
    end

/* ------------------------------------------- *
 * Inform on the results and free the datasets *
 * ------------------------------------------- */
 "Setmsg msg(isrz001)"
 "lmfree dataid("indd1")"
 "lmfree dataid("outdd1")"
 Exit 0

/* ----------------- *
 * Get a member list *
 * ----------------- */
 Get_Members:
   /* ----------------------- *
    * get list of all members *
    * ----------------------- */
    call outtrap 'm.'
    address tso ,
       "listd" in "members"
    call outtrap 'off'
    if m.0 < 7 then do
       zedsmsg = "Error"
       zedlmsg = "The input dataset is empty:" in
       "setmsg msg(isrz001)"
       exit 8
       end
 return

/* -------------------------------- *
 * Fixup the Input and Output dsn's *
 * -------------------------------- */
 Fix_dsns:
 if left(in,1) = "'"
    then ind = substr(in,2,length(in)-2)
    else if sysvar('syspref') /= null then
            ind = sysvar('syspref')'.'in

 if left(out,1) = "'"
    then outd = substr(out,2,length(out)-2)
    else if sysvar('syspref') /= null then
            outd = sysvar('syspref')'.'out
 return

Fix_Trunc:
/* ------------------------------------------------------ *
 * Fix_Trunc routine:                                     *
 *                                                        *
 * Function: To display using LMMDISP those members found *
 *           that may be truncated during a copy.         *
 *                                                        *
 *           Allow the user to Browse the members         *
 *           and to Edit the members to make corrections. *
 * ------------------------------------------------------ */
 arg dsn imem

/* ------------------ *
 * Define ISPF Dataid *
 * ------------------ */
 Address ISPEXEC
   "Lminit Dataid(status) Dataset("dsn") Enq(Shr)"
   "Lmopen Dataid("status") Option(Input)"

  'control nondispl end'
  "LmmDisp dataid("status") option(display)" ,
          "member("word(imem,1)")"
 if words(imem) > 1 then do im = 2 to words(imem)
    "LmmDisp dataid("status") option(add)" ,
       "member("word(imem,im)")"
    end

 if pos("(",input_options) = 0
    then input_options = input_options "( TRunc"
    else input_options = input_options "TRunc"
 zedsmsg = null
 zedlmsg = "These members will suffer a truncation problem" ,
           "when copied. Edit to fix and then rerun the" ,
           "this copy command, or rerun the copy command" ,
           "and specify the TRUNC option'"
 "setmsg msg(isrz001)"

/* -------------------------------------------- *
 * Set the ISPF variables to be used by the     *
 * ISPF Edit macro to identify where truncation *
 * may occur.                                   *
 * -------------------------------------------- */
 ilrecl = in_lrecl
 olrecl = out_lrecl
 "Vput (ilrecl olrecl)"

/* ----------------------- *
 * Now process all members *
 * ----------------------- */
  do forever
    "LmmDisp Dataid("status") Option(Display)" ,
    "Commands(Any)"
    if rc > 7 then leave
    zlmember = strip(zlmember)
    if zllcmd = "S" then do
      "Edit Dataid("status") Member("zlmember")" ,
           "Macro(EMT)"
      if rc = 0 then
      "Lmmdisp Dataid("status") Option(Put) Member("zlmember")",
              "Zludata(Edited)"
       end
    end
/* ------------------------- *
 * Close and Free the Dataid *
 * ------------------------- */
 "LMClose Dataid("status")"
 "LMFree  Dataid("status")"
 zedsmsg = ""
 zedlmsg = "Member(s) updated - try the copy again."
 "Setmsg msg(isrz001)"
Return

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("msgdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
        /* ------------------------- *
         * Source for our ISPF Panel *
         * ------------------------- */
>START
>PANEL VB2FB
)attr default(%+_)
@ type(text) intens(high) caps(off) just(asis ) color(yellow)
% type(text) intens(high)
# type(text) intens(high) caps(off) just(asis ) color(turq)
+ type(text) intens(high) caps(off) just(asis ) color(turq)
)Body Expand(\\)
%-\-\-@Copy Variable->Fixed and Fixed->Variable%-\-\-
+Command%===>_zcmd
+
@   Source Dataset: _indsn                                            +
@   Target Dataset: _outdsn                                           +
@   Members:_mem                                                      +
+
#   Options:
          @Replace: _r+(Y/N)
          @Truncate:_t+(Y/N)
          @NoRenum: _n+(Y/N)
#
#   Copy from a Variable to Fixed or Fixed to Variable DSN
#   Members is one or more member names or name* (pattern)
#
#   PF3 to cancel or Enter to continue
)Init
.help = vb2fbhp
 if (&r = &z)
     &r = 'N'
 if (&t = &z)
     &t = 'N'
 if (&n = &z)
     &n = 'N'
)Proc
 ver (&indsn,nb,dsname)
 ver (&outdsn,nb,dsname)
 ver (&r,nb,list,Y,N)
 ver (&t,nb,list,Y,N)
 ver (&n,nb,list,Y,N)
)End
>PANEL VB2FBHP
)attr default(%+_)
@ type(text) intens(high) caps(off) just(asis ) color(yellow)
$ type(text) intens(high) caps(off) just(asis ) color(turq) hilite(reverse)
# type(text) intens(high) caps(off) just(asis ) color(turq)
% type(text) intens(high)
)Body Expand(\\)
%-\-\-@Copy Variable->Fixed and Fixed->Variable Help%-\-\-
+Command%===>_zcmd
%
#  Function: Copy PDS Members from Variable to Fixed or Fixed to Variable
@
@  Source#      From PDS
@  Target#      To PDS
@  Members#     * for all members  (if blank then default to *)
#               ? to select the members to copy
#               individual member names - multiple allowed
#               member* for wild card member names - multiple allowed
@  Replace#     Replace the member during the copy (default is No
@  Truncate#    Allow Truncation of members during the copy (default is No
@  NoRenum #    Do not renumber if it has sequence numbers (default is No
#
@  Notes:     # 1. Sequence numbers will be fixed if the input member has
#                  ISPF sequence numbers by updating the target member.
#                  - Unless NoRenum is specified.
@             # 2. Data truncation will be detected and a display of those
#                  members will allow for selection to edit and fix them
#
)Init
 .cursor = zcmd
)End
>EXEC  EMT
/* ---------------------------------------------- *
 * ISPF Edit macro to show the user where records *
 * may be truncated.                              *
 * ---------------------------------------------- */
 Address ISREdit
 'macro'
 Address ISPExec "Vget (ilrecl olrecl)"
 "Exclude All"
 "Find p'¬'" olrecl+1 ilrecl "All"
>EXEC  EM1
/* ------------------------------------------------- *
 * ISPF Edit Macro to return the number state of the *
 * source/from member in an ISPF Variable.           *
 * ------------------------------------------------- */
 Address ISREdit
 'macro'
'(flrecl) = lrecl'
 '(numstate,numtype) = Number'
 Address ISPExec 'Vput (numstate flrecl)'
 'end'
>EXEC EM2
/* ------------------------------------------------ *
 * ISPF Edit Macro to update the target/to member's *
 * sequence numbers.                                *
 *                                                  *
 * Called only if EM1 returned 'ON' in the numstate *
 * ISPF variable.                                   *
 * ------------------------------------------------ */
 Address ISRedit
 'Macro'
 Address ISPExec 'vget (numstate flrecl)'
'(lrecl) = lrecl'
'(recfm) = recfm'
 if recfm = 'V' then do
    /* clear out the fixed sequence numbers */
    "change p'#' ' '" flrecl-8 flrecl "all"
    /* shift right 8 to make room for sequence numbers */
   "(maxline) = linenum .zlast"
   do i = 1 to maxline
      "Shift )" i 8
       end
    end
 if recfm = 'F' then do
    /* shift left 8 to remove sequence numbers */
   "(maxline) = linenum .zlast"
   do i = 1 to maxline
      "Shift (" i 8
       end
    end
 "Renum"
 "Save"
 "End"
>END
