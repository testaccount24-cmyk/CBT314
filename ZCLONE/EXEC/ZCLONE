/* --------------------  rexx procedure  -------------------- *
 | Name:      zClone                                          |
 |                                                            |
 | Function:  Copy New and Updated PDS members based on       |
 |            ISPF statistics from a source library to        |
 |            a target library.                               |
 |                                                            |
 |            Only PDS/PDSE libraries that are RECFM          |
 |            F or V (blocked or unblocked) are supported.    |
 |                                                            |
 |            The successful copy information will be         |
 |            written to the ISPF Log.                        |
 |                                                            |
 | Commands:                                                  |
 |           COPY    - Copy all members that are different or |
 |                     don't exist in the target              |
 |                   - COPY non-blank will simulate copy      |
 |           ONLY    - Display only those members that are    |
 |                     copy eligible                          |
 |           REFRESH - Rebuild the display of ALL members     |
 |                     after using ONLY                       |
 |                                                            |
 | Line Selections:                                           |
 |           B       - Browse From member                     |
 |           BT      - Browse To member                       |
 |           C       - Compare using ISPF Edit Compare        |
 |           CS      - Compare using SuperC                   |
 |           E       - Edit from member                       |
 |           ET      - Edit to member                         |
 |           I       - Display From/To ISPF Stats             |
 |           S or /  - Prompt for Selection                   |
 |           X       - Remove member from the table           |
 |                                                            |
 | Syntax:    %zClone from to                                 |
 |                                                            |
 | Dependency:  Requires STEMEDIT (CBTTape file 895)          |
 |                                                            |
 | Usage Notes:                                               |
 |            1. Newer date wins                              |
 |            2. Date in source and not in target wins        |
 |            3. Member in source but not in target wins      |
 |            4. ISPF services are used for stats and copy    |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |                                                            |
 | History:  (most recent on top)                             |
 |            05/25/17 - Make stats field scrollable (l/r)    |
 |                     - Clean up some code illogic           |
 |            05/25/17 - Add ISPF Stats                       |
 |                     - Remove BF option (redundant)         |
 |                     - Add initial message count            |
 |                     - Add Copy simulation                  |
 |            05/24/17 - More updates                         |
 |            05/23/17 - More updates                         |
 |            05/22/17 - Major updates                        |
 |            05/10/17 - Make it work                         |
 |            05/09/17 - Creation                             |
 |                                                            |
 * ---------------------------------------------------------- */

/* ------------------------------------- *
 | Get the From and To PDS dataset names |
 * ------------------------------------- */
  arg frompds topds

/* ------------------- *
 | Define our defaults |
 * ------------------- */
  null     = ''
  zerrhm   = '#zc'
  zerralrm = 'NO'
  stats    = 'cp'random(999)
  Address ISPEXEC
  load_info = loadispf()

/* --------------------------------------- *
 | Check for From and To PDS Dataset Names |
 * --------------------------------------- */
 Check_dsns:
  dsnfok = 0;dsntok = 0
  if frompds = null then call prompt
  if topds   = null then call prompt

  do while sysdsn(frompds) /= 'OK'
    zerrsm   = 'FromPDS Error'
    zerrlm   = frompds sysdsn(frompds)
    'Setmsg Msg(isrz002)'
    call prompt
  end
  dsnfok = 1

  do while sysdsn(topds) /= 'OK'
    zerrsm   = 'ToPDS Error'
    zerrlm   = topds sysdsn(topds)
    'Setmsg Msg(isrz002)'
    call prompt
  end
  dsntok = 1
  if (dsnfok + dsntok) /= 2 then call check_dsns

/* ----------------------------------------------------- *
 | Verify that the FromPDS and ToPDS are supported by    |
 | LMMLIST.   No VSAM, No Sequential, only RECFM F or V. |
 * ----------------------------------------------------- */
 call listdsi frompds
 if pos(left(sysrecfm,1),'FV') = 0 then do
    zerrsm   = 'FromPDS Error'
    zerrlm   = frompds 'Invalid RECFM'
    'Setmsg Msg(isrz002)'
    call prompt
    end
 if sysdsorg /= 'PO' then do
    zerrsm   = 'FromPDS Error'
    zerrlm   = frompds 'Invalid DSORG - not PO'
    'Setmsg Msg(isrz002)'
    call prompt
    end
 call listdsi topds
 if pos(left(sysrecfm,1),'FV') = 0 then do
    zerrsm   = 'ToPDS Error'
    zerrlm   = topds 'Invalid RECFM'
    'Setmsg Msg(isrz002)'
    call prompt
    end
 if sysdsorg /= 'PO' then do
    zerrsm   = 'ToPDS Error'
    zerrlm   = topds 'Invalid DSORG - not PO'
    'Setmsg Msg(isrz002)'
    call prompt
    end

/* --------------------------------- *
 | Restart here if refresh requested |
 * --------------------------------- */
  Restart:
  parse value '' with frommems tomems mem
/* ------------------ *
 | Create stats table |
 * ------------------ */
  'tbcreate' stats 'keys(mem) names(cr crf)'

/* ------------------------------------- *
 | Now check for New and Updated Members |
 * ------------------------------------- */
/* -------------------------- *
 | Get stats for the FROM PDS |
 * -------------------------- */
 member = null
  "LMINIT DATAID(fromid) DATASET("frompds")"
  "LMOPEN DATAID("fromid") OPTION(INPUT)"
  do forever
    "LMMLIST Dataid("fromid") OPTION(LIST) MEMBER(MEMBER)" ,
      "STATS(YES)"
    if rc > 7 then leave
    member = strip(member)
    frommems = frommems member
    from.member = zlmdate zlmtime ,
                  zlcdate zlvers zlmod zlcnorc zlinorc zlmnorc zluser
  end
  "LMClose Dataid("fromid")"

/* ------------------------ *
 | Get stats for the TO PDS |
 * ------------------------ */
  member = null
  "LMINIT DATAID(toid) DATASET("topds")"
  "LMOPEN DATAID("toid") OPTION(INPUT)"
  do forever
    "LMMLIST Dataid("toid") OPTION(LIST) MEMBER(MEMBER)" ,
      "STATS(YES)"
    if rc > 7 then leave
    member = strip(member)
    tomems = tomems member
    to.member = zlmdate zlmtime ,
                zlcdate  zlvers zlmod zlcnorc zlinorc zlmnorc zluser
  end
  "LMClose Dataid("toid")"

/* ----------------------------- *
 | Now compare and do the copies |
 * ----------------------------- */
  fw = words(frommems)
  ecount = 0
  do i = 1 to fw
    mem = word(frommems,i)
    cr  = null
    crf = null
   /* ------------------------- *
    | cr     delta reason       |
    | crf    copy eligible flag |
    |        1 = eligible       |
    * ------------------------- */
    if wordpos(mem,tomems) = 0 then do
       cr  = 'Not in To PDS'
       crf = 1
       ecount = ecount + 1
       end
    else do
      parse value from.mem with fdate ftime
      parse value to.mem   with tdate ttime
      Select
        When fdate''tdate = null then do
             cr = 'No ISPF From or To Stats'
             crf = 1
             ecount = ecount + 1
             end
        When fdate = null then do
             cr = 'No ISPF From Stats'
             crf = 1
             ecount = ecount + 1
             end
        When tdate = null then do
             cr = 'No ISPF To Stats'
             crf = 1
             ecount = ecount + 1
             end
        When fdate > tdate then do
             cr = 'From Date newer than To Date'
             crf = 1
             ecount = ecount + 1
             end
        When fdate < tdate then do
             cr = 'To Date newer than From Date'
             end
        When tdate = null then do
             cr = 'To Date is blank'
             crf = 1
             ecount = ecount + 1
             end
        When fdate = tdate then do
           if ftime > ttime then do
              cr = 'From Date/Time is newer than' ,
                    'To Date/Time'
              crf = 1
              ecount = ecount + 1
              end
           if ftime < ttime then cr = 'To Date/Time is newer than' ,
             'From Date/Time'
          end
        Otherwise nop
      end
    end
    'tbadd' stats
  end

  zerrsm   = ecount 'Copy Eligible'
  zerrlm   = ecount 'members eligible to be Copied.'
  'Setmsg Msg(isrz002)'

/* ---------------------------------------------------- *
 | Sort the table and then display the table of members |
 * ---------------------------------------------------- */
  'tbsort' stats 'fields(mem,c,a)'
  ztdsels = 0
  src     = 0
  crp     = 1
  rowcrp  = 0
  do forever
    if src = 4 then "TBDispl" stats
       else do
            "TBTOP" stats
            "TBSKIP" stats "NUMBER("crp")"
            if rowcrp = 0 then
               "TBDISPL" stats "PANEL(zclonet)"
               else
               "TBDISPL" stats "PANEL(zclonet)",
                       "CSRROW("rowcrp") AUTOSEL(NO)"
             end
    src = rc
    crp = rowcrp
    if src > 4 then leave

/* --------------------------------------------- *
 | Now process the table commands and selections |
 * --------------------------------------------- */
    if zcmd /= null then
    Select
      When abbrev('REFRESH',zcmd,2) = 1 then do
           drop from. to.
           'tbend' stats
           "LMFree  Dataid("fromid")"
           "LMFree  Dataid("toid")"
           signal restart
           end
      When abbrev('COPY',word(zcmd,1),2) = 1 then do
           'tbtop' stats
           count = 0
           do forever
              'tbskip' stats
              if rc > 0 then leave
              if cr = null then iterate
              if cr = 'Copied' then iterate
              if crf /= 1 then iterate
              if word(zcmd,2) = null
                 then x=copy_mem(mem)
                 else x = 0
              if x = 0 then do
                       cr = 'Copied'
                       if word(zcmd,2) /= null
                          then cr = cr 'Simulated'
                       count = count + 1
                       end
                       else cr = zerrlm
             'tbput' stats
           end
       zerrsm   = count 'Copied'
       zerrlm   = 'Copied' count 'members from' frompds 'to' topds
       'Setmsg Msg(isrz002)'
        end
      When abbrev('ONLY',word(zcmd,1),1) = 1 then do
        'tbtop' stats
        do forever
           'tbskip' stats
           if rc > 0 then do
              'tbtop' stats
              leave
              end
           if crf /= 1 then 'tbdelete' stats
           end
        end
      When abbrev('SORT',word(zcmd,1),1) = 1 then do
        parse value zcmd with cmd sfield
        if left(sfield,1) = 'M' then
        'tbsort' stats 'fields(mem,c,a)'
        if left(sfield,1) = 'S' then
        'tbsort' stats 'fields(cr,c,a)'
      end
      Otherwise do
                zerrsm = zcmd 'Unknown'
                zerrlm = zcmd 'is an unknown command'
                'setmsg msg(isrz002)'
                end
    end

/* ------------------------------------- *
 | Process the Member Selection Commands |
 * ------------------------------------- */
  if csel /= null then
     Select
     When csel = 'S' then csel = '/'
     When csel = 'I' then do
          'control display save'
          'addpop'
          parse value from.mem with fmdate fmtime fcdate fvers ,
                fmod fcnorc finorc fmnorc fuser
          if fmod /= null then fmod = fmod + 0
          if finorc /= null then finorc = finorc + 0
          parse value to.mem with tmdate tmtime tcdate tvers ,
                tmod tcnorc tinorc tmnorc tuser
          if fmod /= null then fmod = fmod + 0
          if finorc /= null then finorc = finorc + 0
          'display panel(zcispf)'
          'rempop'
          'control display restore'
          end
     When csel = '/' then do until csel /= null
        csel = null
        'addpop'
        'display panel(zclones)'
        xc = rc
        'rempop'
        if xc > 0 then leave
        if zcmd /= null then csel = zcmd
        end
     When csel = 'X' then 'tbdelete' stats
     When csel = 'B' then do
        if left(frompds,1) = "'" then do
           parse value frompds with "'"frompds"'"
           oldds = "'"frompds"("mem")'"
           end
           else oldds = frompds'('mem')'
        'Control Display Save'
        'Browse Dataset('oldds')'
        'Control Display Restore'
        end
     When csel = 'E' then do
        if left(frompds,1) = "'" then do
           parse value frompds with "'"oldds"'"
           oldds = "'"oldds"("mem")'"
           end
           else oldds = frompds'('mem')'
        'Control Display Save'
        'Edit Dataset('oldds')'
        'Control Display Restore'
        end
     When csel = 'BT' then do
        if left(topds,1) = "'" then do
           parse value topds with "'"newds"'"
           newds = "'"newds"("mem")'"
           end
           else newds = topds'('mem')'
        'Control Display Save'
        'Browse Dataset('newds')'
        'Control Display Restore'
        end
     When csel = 'ET' then do
        if left(topds,1) = "'" then do
           parse value topds with "'"newds"'"
           newds = "'"newds"("mem")'"
           end
           else newds = topds'('mem')'
        'Control Display Save'
        'Edit Dataset('newds')'
        'Control Display Restore'
        end
     When csel = 'C' then do
        if cr  = 'Not in To PDS' then do
           zerrsm = 'Not Supported'
           zerrlm = 'Member' mem 'is not in the To PDS so it cannot' ,
                    'be compared.'
          'Setmsg Msg(isrz002)'
           end
        else do
        if left(frompds,1) = "'" then do
           parse value frompds with "'"oldds"'"
           oldds = "'"oldds"("mem")'"
           end
           else oldds = frompds'('mem')'
        if left(topds,1) = "'" then do
           parse value topds with "'"parm"'"
           parm = "'"parm"("mem")'"
           end
           else parm = topds'('mem')'
        parm = parm oldds
        "LMINIT DATAID(fromid) DATASET("frompds")"
        "LMOPEN DATAID("fromid") OPTION(INPUT)"
        'edit dataid('fromid') member('mem') macro(pdsnc)' ,
              'parm(parm)'
        "LMClose Dataid("fromid")"
        end
        end
     When csel = 'CS' then do
        if cr  = 'Not in To PDS' then do
           zerrsm = 'Not Supported'
           zerrlm = 'Member' mem 'is not in the To PDS so it cannot' ,
                    'be compared.'
          'Setmsg Msg(isrz002)'
           end
        else do
        Address TSO
        call outtrap 'x.'
        'Free f(olddd newdd outdd)'
        call outtrap 'off'
        if left(frompds,1) = "'" then do
           parse value frompds with "'"oldds"'"
           oldds = "'"oldds"("mem")'"
           end
           else oldds = frompds'('mem')'
        if left(topds,1) = "'" then do
           parse value topds with "'"newds"'"
           newds = "'"newds"("mem")'"
           end
           else newds = topds'('mem')'
        'alloc f(olddd) ds('oldds') shr reuse'
        'alloc f(newdd) ds('newds') shr reuse'
        'alloc f(outdd) new spa(15,15) tr reuse' ,
            'recfm(v b) lrecl(121) blksize(0) unit(sysda)'
        Address ISPexec ,
           'Select PGM(isrsupc) Parm(DELTAL,LINECMP)'
        'execio * diskr outdd (finis stem in.'
        'free f(olddd newdd outdd)'
        Address ISPexec
        cf = 0
        cr = 'Identical'
        do ci = 1 to in.0
           if pos('TOTAL CHANGES',in.ci) > 0 then
              if word(in.ci,6) > 0 then cf = 1
           if cf = 1 then cr = 'Delta'
           if cf = 1 then leave
           end
        call stemedit 'view',in.,,,'SuperC Compare'
        'tbput' stats
        end
        end
     Otherwise nop
     end
  csel = null
  end
  'tbend' stats

/* ------------------- *
 | Exit as we are done |
 * ------------------- */

/* -------- *
 * Clean up *
 * -------- */
Done:
  "LMFree  Dataid("fromid")"
  "LMFree  Dataid("toid")"
  if load_info /= null then do
    do until length(load_info) = 0
      parse value load_info with dd libd load_info
      if left(libd,6) = "ALTLIB" then do
         if libd = "ALTLIBC" then lib = "CLIST"
                             else lib = "EXEC"
         Address TSO,
           "Altlib Deact Application("lib")"
         end
      "libdef" libd
      address tso "free f("dd")"
    end
  end
  Exit 0

Copy_Mem:
  arg copymem
  'lmcopy fromid('fromid') frommem('copymem')' ,
    'todataid('toid') replace'
  if rc = 0 then
     'log msg(zc001)'
  return rc

Prompt:
  do forever
    'Display Panel(zClone)'
    if rc > 0 then call done
    leave
  end
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            12/09/16 - update for add_it routine            *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
  Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
  end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
    end
  end
  if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
Add_It:
  Select
    When type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
  end
  type = null
  return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return

/* --------------------------- *
 | The start for inline panels |
 * --------------------------- */
>Start
>Panel #zc
)ATTR DEFAULT(@$_)
@   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
$   TYPE(TEXT)  INTENS(LOW)  SKIP(ON)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
@Tutorial$-\-\-(@zClone$)-\-\-@Tutorial
@Command ===>_ZCMD
$
@zClone$will copy New and Updated Members from One PDS to Another
$
@Commands:
@  @Copy$   Will copy all members in the list based on the
$           rules on the next tutorial panel
$           Any non-blank parm will simulate the Copy
$  @Only$   Removes from the list all members that do not
$           satifsy the copy criteria
$  @Refresh$Refresh the member list after use of Only or X
$  @Sort$   Sort Member or Sort Status
$
@Line Selections:
$  @B$      Browse the From member     @ET$     Edit the To member
$  @BT$     Browse the To member       @I$      Display ISPF Stats
$  @C$      ISPF Edit Compare          @S$or@/$ Display Selection prompt
$  @CS$     SuperC Compare             @X$      Exclude the member
$  @E$      Edit the From member
$
$
$ \ \ (press@ENTER$to continue) \ \
)INIT
 &zcont = #zc1
)PROC
)END
>Panel #zc1
)ATTR DEFAULT(@$_)
@   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
$   TYPE(TEXT)  INTENS(LOW)  SKIP(ON)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
@Tutorial$-\-\-(@zClone$)-\-\-@Tutorial
@Command ===>_ZCMD
$
@zClone$State Descriptions
$
$       Copied       - Member copied
$       Delta        - Members are different per SuperC Compare
$       Identical    - Members are the same per SuperC Compare
$
$Self Explanatory States
$
$       From Date newer than To Date
$       From Date/Time is newer than To Date/Time
$       Not in To PDS
$       To Date is blank
$       To Date newer than From Date
$       To Date/Time is newer than From Date/Time
$       No ISPF From Stats
$       No ISPF To Stats
$       No ISPF From or To Stats
$
$
$ \ \ (press@ENTER$to continue) \ \
)INIT
 &zup = #zc
 &zcont = #zc2
)PROC
)END
>Panel #zc2
)ATTR DEFAULT(@$_)
@   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
$   TYPE(TEXT)  INTENS(LOW)  SKIP(ON)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
@Tutorial$-\-\-(@zClone$)-\-\-@Tutorial
@Command ===>_ZCMD
$
@zClone$Rules
$
$       1. Both PDS datasets must exist
$       2. PDSE Member Generations are NOT copied
$       3. Members in the FROM that do not exist in the TO
$          PDS will be copied
$       4. Members in the TO that do not exist in the FROM
$          PDS are ignored
$       5. Members in the FROM PDS with a newer date in the ISPF
$          Statistics will be copied
$       6. Members in the FROM PDS with no ISPF Statistics will
$          ONLY be copied if the same name is not found in the TO PDS
$       6. Members in the FROM PDS with ISPF Statistics and that
$          have no ISPF Statistics in the TO PDS will be copied
$       7. Load Libraries are not supported.
$       8. The Member display table is scrollable left/right to view
$          Copy status messages that may be longer than will fit.
$
$
$ \ \ (press@ENTER$to continue) \ \
)INIT
 &zup = #zc1
 &zcont = #zc
)PROC
)END
>Panel zClone
)Attr Default(%+_)
@ type(text  ) intens(high)  caps(off) just(left )
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low)
)Body expand(\\)
%-\-\-+zClone Dataset Prompt%-\-\-
%Command ===>_zcmd
+
+From PDS Dataset:$frompds                                       +
+To   PDS Dataset:$topds                                         +
+
+Compare two PDS Libraries and identify differences between From
+and To libraries.
+
+Commands:
+  @COPY+   - copy all eligible members (see rules)
+           - any non-blank parm will simulate Copy
+  @ONLY+   - display only eligible members for copy
+  @REFRESH+- display all members
+
+Line Commands:
+  @B+      - Browse the From member     @ET+     - Edit the To member
+  @BT+     - Browse the To member       @I+      - ISPF Statspare
+  @C+      - ISPF Edit Compare          @S+or@/+ - Display Selection prompt
+  @CS+     - SuperC Compare             @X+      - Exclude the member
+  @E+      - Edit the From member
+
+ \ \ (press%ENTER+to Continue%PF3+to Cancel) \ \
)Init
 vget (frompds topds) profile
 if (&frompds = &z)
     .cursor = frompds
 if (&frompds NE &z)
     .cursor = topds
 .help = #zc
)Proc
 ver (&frompds,nb,dsnameq)
 ver (&topds,nb,dsnameq)
 vput (frompds topds) profile
)End
>Panel zclones
)Attr Default(%+_)
@ type(text  ) intens(high)  caps(off) just(left )
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low)
)Body window(57,15) expand(\\)
%-\-\-+zClone Dataset Prompt%-\-\-
%Option ===>_zcmd
+
+Valid member selection option:
+
+    @B+  - Browse the From member
+    @BT+ - Browse the To member
+    @C+  - Compare the members using ISPF Edit Compare
+    @CS+ - Compare members using SuperC
+    @E+  - Edit the From member
+    @ET+ - Edit the To member
+    @I+  - Display ISPF Stats
+    @X+  - Remove (exclude) the member from processing
+
+ \ \ (Enter an Option to Continue or%PF3+to Cancel) \ \
)Init
 .help = #zc
)Proc
 ver (&zcmd,list,B,BT,C,CS,I,X)
)End
>Panel zcispf
)Attr Default(%+_)
@ type(output) intens(high)  caps(off) just(left )
$ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
+ type(text) intens(low)
)Body window(57,14) expand(\\)
%-\-\-+zClone Member Info%-\-\-
%Command ===>_zcmd
+
+               Member Name:   @mem
+From                           To
+Create Date:  @fcdate         +Create Date:  @tcdate
+Mod Date:     @fmdate         +Mod Date:     @tmdate
+Mod Time:     @fmtime         +Mod Time:     @tmtime
+Size:         @fcnorc         +Size:         @tcnorc
+Ver:          @fvers          +Ver:          @tvers
+Mod:          @fmod           +Mod:          @tmod
+User          @fuser          +User          @tuser
+
+ \ \ (press%ENTER+to Continue) \ \
)Init
 .help = #zc
)Proc
)End
>Panel zclonet
)Attr Default(%+_)
  @ type(output) intens(high) just(left )
  # type(output) intens(low)  just(left )
  $ type( input) intens(high) caps(on ) just(left ) hilite(uscore)
  + type(text) intens(low)
  _ type(input) intens(high) caps(on) hilite(uscore)
)Body  expand(\\)
%-\-\-+zClone Member Prompt%-\-\-
%Command ===>_zcmd                                            %Scroll ===>_amt +
+
%From:#frompds
%  To:@topds
+
% Sel   Member    State
)Model
 +_z + #z        @z
)Init
 .zvars = '(csel mem cr)'
 .help = #zc
 if (&amt = &z)
     &amt  = csr
)Proc
 ver (&csel,list,I,X,C,B,BT,E,ET,CS,/,S)
 &amt = trans(trunc(&amt,1),H,HALF,C,CSR,P,PAGE,*,*)
)Field
 Field(cr) ind(mpind,'<>') len(255) scale(lr1sc)
)End
>Msg zc00
zc001 '&COPYMEM Copied Successfully'
'Copied from &FROMPDS to &TOPDS'
>EXEC pdsnc
/* rexx */
 Address ISREdit
 'macro (parm)'
 parse value parm with parm fromds
 'compare' parm 'x'
  msg = "Comparing" fromds "to" parm
  'l 0'
 'line_after ' 0 '= msgline "'msg'"'
>end
